// Mocks generated by Mockito 5.4.4 from annotations
// in dima_project/test/mocks/mock_news_service.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dima_project/models/article_model.dart' as _i3;
import 'package:dima_project/services/news_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NewsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsService extends _i1.Mock implements _i2.NewsService {
  MockNewsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.ArticleModel> get news => (super.noSuchMethod(
        Invocation.getter(#news),
        returnValue: <_i3.ArticleModel>[],
      ) as List<_i3.ArticleModel>);

  @override
  set news(List<_i3.ArticleModel>? _news) => super.noSuchMethod(
        Invocation.setter(
          #news,
          _news,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.ArticleModel> get categories => (super.noSuchMethod(
        Invocation.getter(#categories),
        returnValue: <_i3.ArticleModel>[],
      ) as List<_i3.ArticleModel>);

  @override
  set categories(List<_i3.ArticleModel>? _categories) => super.noSuchMethod(
        Invocation.setter(
          #categories,
          _categories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.ArticleModel> get sliders => (super.noSuchMethod(
        Invocation.getter(#sliders),
        returnValue: <_i3.ArticleModel>[],
      ) as List<_i3.ArticleModel>);

  @override
  set sliders(List<_i3.ArticleModel>? _sliders) => super.noSuchMethod(
        Invocation.setter(
          #sliders,
          _sliders,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> getNews() => (super.noSuchMethod(
        Invocation.method(
          #getNews,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getCategoriesNews(String? category) => (super.noSuchMethod(
        Invocation.method(
          #getCategoriesNews,
          [category],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getSliders() => (super.noSuchMethod(
        Invocation.method(
          #getSliders,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i3.ArticleModel>> getSearchedNews(String? search) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSearchedNews,
          [search],
        ),
        returnValue: _i4.Stream<List<_i3.ArticleModel>>.empty(),
      ) as _i4.Stream<List<_i3.ArticleModel>>);
}
